


-----------------------------------------------------------------------------------

skynet_mq

https://blog.codingnow.com/2012/10/bug_and_lockfree_queue.html

全局消息队列处理的业务很简单，就是存放着系统所有服务的二级消息队列。每个工作线程
都是平等的，从中取得一个二级消息队列，处理完其中的一个消息，然后将其压回去。

原来的锁最重要的用途是在全局消息队列容量不够时，保护重新分配内存的过程不被干扰。
但实际上，全局消息队列的预容量大于系统中服务体的数量的话，是永远够用的。我设置了
单台机器支撑的服务体数量上限为 64K 个，那么消息队列预分配 64K 个单元，就无需动态
调整。


https://blog.codingnow.com/2014/05/skynet_mq_flags.html

https://blog.codingnow.com/2012/08/skynet_bug.html

当 ctx 销毁前，由它向其 mq 设入一个清理标记。然后在 globalmq 取出 mq ，发现已经找
不到 handle 对应的 ctx 时，先判断是否有清理标记。如果没有，再将 mq 重放进 globalmq
，直到清理标记有效，在销毁 mq 。


https://blog.codingnow.com/2016/01/skynet2.html


https://blog.codingnow.com/2016/01/skynet_mq.html



-----------------------------------------------------------------------------------

https://github.com/cloudwu/skynet/issues/794

struct socket {
	uintptr_t opaque;
	struct wb_list high;
	struct wb_list low;
	int64_t wb_size;
	struct socket_stat stat;
	volatile uint32_t sending;
	int fd;
	int id;
	uint8_t protocol;
	uint8_t type;
	uint16_t udpconnecting;
	int64_t warn_size;
	union {
		int size;
		uint8_t udp_address[UDP_ADDRESS_SIZE];
	} p;
	struct spinlock dw_lock;
	int dw_offset;
	const void * dw_buffer;
	size_t dw_size;
};

为了解决这个问题，我做了两处修改。

1 sending 计数器只用于和 socket thread 通讯，在包加入队列后就把计数器减少。（之前要等包真的发出去）

2 在递增 sending 计数器的时候做一个检查，如果要溢出了，就开始忙等 socket thread 递减。

#define MAX_SOCKET_P 16
#define ID_TAG16(id) ((id>>MAX_SOCKET_P) & 0xffff)

static struct socket *
new_fd(struct socket_server *ss, int id, int fd, int protocol, uintptr_t opaque, bool add) {
	struct socket * s = &ss->slot[HASH_ID(id)];
	assert(s->type == SOCKET_TYPE_RESERVE);
	// ...
	s->sending = ID_TAG16(id) << 16 | 0;  // 保留16-32位，0-16位置0
	// ...
	return s;
}

static inline int
nomore_sending_data(struct socket *s) {
	return send_buffer_empty(s) && s->dw_buffer == NULL && (s->sending & 0xffff) == 0;
}


static inline void
inc_sending_ref(struct socket *s, int id) {
	if (s->protocol != PROTOCOL_TCP)
		return;
	for (;;) {
		uint32_t sending = s->sending;
		if ((sending >> 16) == ID_TAG16(id)) {
			if ((sending & 0xffff) == 0xffff) {
				// s->sending may overflow (rarely), so busy waiting here for socket thread dec it. see issue #794
				continue;
			}
			// inc sending only matching the same socket id
			if (ATOM_CAS(&s->sending, sending, sending + 1)) // 如果 sending == s->sending 就把 sending + 1 写进 s->sending
				return;
			// atom inc failed, retry
		} else {
			// socket id changed, just return
			return;
		}
	}
}

static inline void
dec_sending_ref(struct socket_server *ss, int id) {
	struct socket * s = &ss->slot[HASH_ID(id)];
	// Notice: udp may inc sending while type == SOCKET_TYPE_RESERVE
	if (s->id == id && s->protocol == PROTOCOL_TCP) {
		assert((s->sending & 0xffff) != 0);
		ATOM_DEC(&s->sending); // s->sending 减 1
	}
}


-----------------------------------------------------------------------------------
